CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    userName TEXT NOT NULL UNIQUE,
    description TEXT,
    city TEXT,
    createdAt TIMESTAMP DEFAULT NOW(),
    followingQty INTEGER NOT NULL DEFAULT 0,
    followersQty INTEGER NOT NULL DEFAULT 0
);

CREATE INDEX IF NOT EXISTS User_userName ON users(userName);

insertUser:
INSERT INTO users (name, userName, description, city,  followingQty, followersQty)
VALUES (?, ?, ?, ?, ?, ?);

selectAllUsers:
SELECT * FROM users;

CREATE TABLE IF NOT EXISTS tweet (
    id SERIAL PRIMARY KEY,
    userID INTEGER NOT NULL,
    userName TEXT NOT NULL,
    text TEXT NOT NULL,
    likeQty INTEGER NOT NULL DEFAULT 0,
    image TEXT ,
    identifier TEXT NOT NULL,
    createdAt TIMESTAMP DEFAULT NOW(),
    FOREIGN KEY (userID) REFERENCES users(id) ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS Tweet_userID ON tweet(userID);
CREATE INDEX IF NOT EXISTS Tweet_userName ON tweet(userName);

insertTweet:
INSERT INTO tweet (userID, userName, text, likeQty, image, identifier )
VALUES (?, ?, ?, ?, ?, ? );

selectAllTweets:
SELECT * FROM tweet;

selectTweetsByUserID:
SELECT * FROM tweet WHERE userID = ?;

CREATE TABLE IF NOT EXISTS likes (
    id SERIAL PRIMARY KEY,
    userID INTEGER NOT NULL,
    tweetID INTEGER NOT NULL,
    createdAt TIMESTAMP DEFAULT NOW(),
    FOREIGN KEY (userID) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (tweetID) REFERENCES tweet(id) ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS Like_userID ON likes(userID);
CREATE INDEX IF NOT EXISTS Like_tweetID ON likes(tweetID);

insertLike:
INSERT INTO likes (userID, tweetID)
VALUES (?, ?);

selectLikesByTweetID:
SELECT * FROM likes WHERE tweetID = ?;

CREATE TABLE IF NOT EXISTS Comment (
    id SERIAL PRIMARY KEY,
    tweetID INTEGER NOT NULL,
    userID INTEGER NOT NULL,
    content TEXT NOT NULL,
    createdAt TIMESTAMP DEFAULT NOW(),
    FOREIGN KEY (tweetID) REFERENCES tweet(id) ON DELETE CASCADE,
    FOREIGN KEY (userID) REFERENCES users(id) ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS Comment_tweetID ON Comment(tweetID);
CREATE INDEX IF NOT EXISTS Comment_userID ON Comment(userID);


insertComment:
INSERT INTO Comment (tweetID, userID, content)
VALUES (?, ?, ?);

selectCommentsByTweetID:
SELECT * FROM Comment WHERE tweetID = ?;

selectAllComments:
SELECT * FROM Comment;
